---
description: Guide and best practices for testing using Vitest
globs: tests/**/*.ts, tests/**/*.tsx,vitest.config.ts
alwaysApply: false
---

# Testing Guide

This project uses **Vitest** for unit testing.

## Directory Structure

Tests are organized as follows:
---

# 테스트 커서 룰

```markdown
---
title: testing-guide
description: Vitest를 사용한 테스트 가이드 및 모범 사례
glob: tests/**/*.ts, tests/**/*.tsx, vitest.config.ts
---

# 테스트 가이드

이 프로젝트는 [Vitest](mdc:https:/vitest.dev)를 사용하여 단위 테스트를 구현합니다.

## 테스트 구조

테스트는 다음과 같은 구조로 구성되어 있습니다:

```
tests/
  ├── __tests__/           # 단위 테스트 파일들
  │   ├── auth.test.ts     # 인증 관련 테스트
  │   └── storage.test.ts  # 스토리지 관련 테스트
  ├── setup.ts             # 테스트 설정
  └── README.md            # 테스트 문서
```

## 테스트 실행 방법

```bash
# 모든 테스트 실행
pnpm test

# 감시 모드로 테스트 실행 (코드 변경 시 자동 재실행)
pnpm test:watch
```

## 테스트 파일 작성 방법

새 테스트 파일은 `tests/__tests__/` 디렉토리에 `*.test.ts` 또는 `*.test.tsx` 형식으로 추가합니다.

```typescript
import { describe, it, expect } from "vitest";

describe("기능 테스트", () => {
  it("예상대로 동작해야 함", () => {
    expect(true).toBe(true);
  });
});
```

## 모킹 방법

Supabase 클라이언트와 같은 외부 의존성을 모킹하는 방법:

```typescript
import { vi } from "vitest";

// Supabase 클라이언트 모킹
vi.mock("@/utils/supabase/server", () => {
  return {
    createServerSupabaseClient: vi.fn(() => ({
      auth: {
        signInWithPassword: vi.fn(),
        signUp: vi.fn(),
      },
    })),
  };
});
```

## 환경 변수 설정

테스트 환경에서는 [setup.ts](mdc:tests/setup.ts) 파일에서 다음과 같은 환경 변수가 설정됩니다:

```
NEXT_PUBLIC_SUPABASE_URL: 'https://example.supabase.co'
NEXT_PUBLIC_SUPABASE_ANON_KEY: 'mock-anon-key'
NEXT_PUBLIC_STORAGE_BUCKET: 'test-bucket'
NEXT_PUBLIC_SITE_URL: 'http://localhost:3000'
```

## 테스트 모범 사례

1. 각 테스트는 독립적이고 격리되어야 합니다.
2. 복잡한 로직은 여러 작은 단위로 나누어 테스트합니다.
3. 모든 액션과 유틸리티 함수에 대한 테스트를 작성합니다.
4. 엣지 케이스와 오류 상황도 테스트합니다.
5. 테스트 커버리지를 높게 유지합니다.

## 참고 문서

자세한 내용은 [tests/README.md](mdc:tests/README.md)를 참조하세요.
```
